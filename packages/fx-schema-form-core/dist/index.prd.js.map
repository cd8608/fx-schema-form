{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 2ea4696a063973b00b34","webpack:///./src/libs/resolve.ts","webpack:///./src/factory.ts","webpack:///./node_modules/babel-runtime/helpers/classCallCheck.js","webpack:///./src/libs/factory.ts","webpack:///./src/index.ts","webpack:///./src/keys/ref.ts","webpack:///./src/keys/oneof.ts","webpack:///./src/keys/anyof.ts","webpack:///./src/types/array.ts","webpack:///./src/types/object.ts","webpack:///./src/types/none.ts","webpack:///./src/libs/merge.ts","webpack:///./src/models/uischema.ts","webpack:///./src/models/jsonschema.ts"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","regexp","getDataKeys","schemaKey","keepFirst","arguments","length","undefined","split","map","key","index","test","lastIndex","replace","filter","getSchemaId","keys","ResolveLib","ajv","schema","$id","mergeSchema","initSchema","compileSchema","$ref","validateSchema","errors","getSchema","addSchema","__WEBPACK_IMPORTED_MODULE_1__factory__","type","constructor","String","toString","has","schemaFieldFactory","__WEBPACK_IMPORTED_MODULE_0__libs_factory__","schemaKeyWordFactory","schemaTypeFactory","schemaKeysFactory","convertKeys","forEach","val","default","instance","Constructor","TypeError","BaseFactory","pi","add","intance","override","lock","unLock","func","clear","__WEBPACK_IMPORTED_MODULE_3__factory__","__WEBPACK_IMPORTED_MODULE_0__keys_index__","__WEBPACK_IMPORTED_MODULE_1__types_index__","__webpack_exports__","validate","schemaAjv","assign","refKeys","__WEBPACK_IMPORTED_MODULE_0__libs_resolve__","oneOf","Array","schemaOfOne","anyOf","items","propertySchemaResolve","join","pro","properties","indexOf","currentSchema","__WEBPACK_IMPORTED_MODULE_0__factory__","__WEBPACK_IMPORTED_MODULE_1__libs_resolve__","resolve","schemaPath","concat","getUiSchemaKeyRecursion","uiSchemaKeys","parentKeys","shift","keysStr","__WEBPACK_IMPORTED_MODULE_2__factory__","__WEBPACK_IMPORTED_MODULE_3__resolve__","mergeUiSchemaToArray","uiSchema","initUiSchema","parent","getParentSchemaKeys","getCurrentSchemaKey","pushMergeResult","uiSchemasFirst","uiSchemasLast","push","MergeLib","uiSchemas","mergeUiSchemaList","__WEBPACK_IMPORTED_MODULE_1__models_uischema__","keyPath","curSchema","idx","types","lastIndexOf","slice","us","_uiSchema","initMergeSchema","uiSchemaSchema","minLength","required","a"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,IAAAD,IAEAD,EAAA,IAAAC,IARA,CASC,oBAAAK,UAAAC,KAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAR,QAGA,IAAAC,EAAAK,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAV,YAUA,OANAW,EAAAH,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAS,GAAA,EAGAT,EAAAD,QAqCA,OAhCAO,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,IAAAgB,EAAAhB,KAAAwB,WACA,WAA2B,OAAAxB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAM,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,OAAAR,OAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,6HCvDYC,EAAS,MAaGC,EAAG,SAAkBC,OAAWC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAyB9C,OAxBEF,EAAkBK,MAAK,KAAIC,IAAC,SAAYC,EAAmBC,GAE5D,OAAY,IAANA,GAAgBV,EAAKW,KAAMF,IAI1BT,EAAUY,UAAK,EACHT,EAAIM,EAAQI,QAAOb,EAAO,IAChD,MAGyB,eAAlBS,EAEP,KAGoB,UAAbA,EAEP,IAGJA,IAGkBK,OAAC,SAAuBL,GAChC,OACV,OADcA,KAQMM,EAAG,SAA8Bb,GACrD,IAAUc,EAAYd,EAAMK,MAAM,KAE/B,OAAMS,EAAQX,OAONW,EAAG,GAAQH,QAAOb,EACjC,IAHI,iBAcA,SAAAiB,EAA4BC,EAAqBC,OAAWC,EAAAhB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAQ,eAAhD/B,KAAG6C,IAAKA,EAAgC7C,KAAG+C,IAAKA,EAF7D/C,KAAWgD,eAILD,GACD/C,KAAWiD,WAAIJ,EACvBC,GAEI9C,KAAckD,cAAOJ,EAAKC,GAAUD,EAAKK,MACjD,uBAUkBF,WAAA,SAASJ,EAAqBC,GAC5C,IAAOC,EAA6BD,EAAKC,IAEtC,IAAKA,IAAWD,EAAMK,KAIf,OACVL,EAGG,IAAKD,EAAeO,eAASN,GAC5B,MAASD,EACbQ,OAOM,OAJCN,IAAQF,EAAUS,UAAMP,IACxBF,EAAUU,UACjBT,GAGJA,eAQqBI,cAAA,SAAoBJ,EAAaC,GAM/C,GALGD,EAAoBU,EAAA,EAAItC,IAAa,YAAjBsC,CAAwBV,EAASC,GAAOD,EAAIC,IAAO,IAAM/C,KAAM6C,KAErF7C,KAAYgD,YAAUF,EAGfA,EAAKW,OAAUX,EAAMK,MAKtBL,EAAKW,KAAYC,cAAYC,OAApC,CAOH,IAAQF,EAAiBX,EAAKW,KAAYG,WAGrBJ,EAAA,EAAIK,IAAOJ,KACxBzD,KAAYgD,YAAoBQ,EAAA,EAAItC,IAAMuC,EAAVD,CAAiBV,EAASC,GAAOD,EAAIC,IAAO,IAAM/C,KAC1F6C,4NC1IqBiB,EAAG,IAAgCC,EAAA,EACjCC,EAAG,IAAkED,EAAA,EACxEE,EAAG,IAA+EF,EAAA,EAClFG,EAAG,IAA0BH,EAAA,EAOnCI,EAAG,SAAoBrB,EAA2BD,GAK9D,OAJcmB,EAAQI,QAAC,SAAYhC,EAAyDiC,GACxFvB,EAAMuB,EAAOvB,EACvBD,KAGJC,iCCpBAnD,EAAAyB,YAAA,EAEAzB,EAAA2E,QAAA,SAAAC,EAAAC,GACA,KAAAD,aAAAC,GACA,UAAAC,UAAA,wHCHMC,EAAA,WAAN,SAAAA,gBACc1E,KAACI,KACHJ,KAAE2E,yBASAC,IAAA,SAAajE,EAAYkE,OAAUC,EAAA/C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACtC,IAAK/B,KAAG2E,GAAenD,eAAOb,KAIpBmE,IAAQ9E,KAAI6D,IAAOlD,IAK1B,OAFFX,KAAEI,EAAMO,GAAWkE,GAG3B,eAEUhB,IAAA,SAAalD,GACb,OAAKX,KAAEI,EAAeoB,eAChCb,gBAMUO,IAAA,SAAaP,GAChB,OAAKX,KAAI6D,IAAOlD,GACJX,KAAEI,EACjBO,GAMJ,kBAMWoE,KAAA,SAAapE,GACZX,KAAI6D,IAAOlD,KACXX,KAAG2E,GAAMhE,IACjB,gBAMSqE,OAAA,SAAarE,GACdX,KAAI6D,IAAOlD,WACJX,KAAG2E,GAClBhE,gBAOUyD,QAAA,SAAmCa,GAC1C,GAAOA,EAIN,IAAC,IAAS7C,KAAQpC,KAAGI,EAAE,CACpB,GAAKJ,KAAEI,EAAeoB,eAAMY,GAGxB,IAA8B,IAAzB6C,EAAI7C,EAFQpC,KAAEI,EAAMgC,IAI5B,oBAQA8C,MAAA,WACJlF,KAAEI,KACFJ,KAAG2E,SAvFT,yiBCMcQ,EAAA,EAAIP,IAAM,MAAOQ,EAAA,GACjBD,EAAA,EAAIP,IAAQ,QAASQ,EAAA,GACrBD,EAAA,EAAIP,IAAQ,QAASQ,EAAA,GAGxBD,EAAA,EAAIP,IAAQ,QAASS,EAAA,GACrBF,EAAA,EAAIP,IAAS,SAAQS,EAAA,GACrBF,EAAA,EAAIP,IAAY,YAAQS,EAAA,GACxBF,EAAA,EAAIP,IAAS,SAAQS,EAAA,GACrBF,EAAA,EAAIP,IAAO,OAAQS,EAAA,GACnBF,EAAA,EAAIP,IAAM,MAAQS,EAAA,GAClBF,EAAA,EAAIP,IAAU,UAAQS,EAAA,GACtBF,EAAA,EAAIP,IAAU,UAAQS,EAAA,GACtBF,EAAA,EAAIP,IAAS,SAAUS,EAAA,iNCZxCC,EAAA,WAAmCxC,EAAcD,GAC1C,GAAOC,GAAUA,EAAMK,KAAE,CACxB,IAAYoC,EAAwB1C,EAAUS,UAAOR,EAAOK,MAEzD,GAASoC,GAAYA,EAAQzC,OAAE,CAC9B,IAAa0C,EAAS1E,OAAO2E,UAAaF,EAAwBzC,QAS5D,OAPG0C,EAAKrC,KAASL,EAAMK,YACbqC,EAAKzC,IAEfjC,OAAO2E,OAAUD,GACZE,QAAa5E,OAAA6E,EAAA,EAAA7E,CAAOgC,EAC5BK,QAGPqC,GAOE,OACV1C,4CCtBAwC,EAAA,WAAmCxC,EAA2BD,GAEvD,IAASC,EACF,OACVA,EAEA,IAAS8C,EAAS9C,EAAO8C,MAenB,OAbGA,GAASA,EAAYlC,cAAWmC,QAC/B/C,EAAM8C,QAAYzD,IAAC,SAA6B2D,GAQ5C,OAPgB,IAAcH,EAAA,EAAI9C,EAAeiD,GAApC9C,eAY/BF,4CCtBAwC,EAAA,WAAmCxC,EAA2BD,GAEvD,IAASC,EACF,OACVA,EAEA,IAASiD,EAASjD,EAAOiD,MAenB,OAbGA,GAASA,EAAYrC,cAAWmC,QAC/B/C,EAAMiD,QAAY5D,IAAC,SAA6B2D,GAQ5C,OAPgB,IAAcH,EAAA,EAAI9C,EAAeiD,GAApC9C,eAY/BF,oNC5BWkD,EAAW,QAMtBV,EAAA,WAAmCxC,EAAmBjB,EAAcgB,GAC7D,GAAOC,EAAOkD,MAAE,CACf,IAAyBC,EAAG,IAAcN,EAAA,EAAI9C,EACpCC,EAAqBkD,OACjBnE,EAAQmE,GAAKE,KACzB,MAEQvD,EAAwB7B,OAAA6E,EAAA,EAAA7E,EAAWe,EAAQmE,GAAKE,KAAO,MAE3DpF,OAAO2E,OAAsBQ,EAAYjD,aAGnDL,SAEM,OACVG,4CCrBSqD,EAAgB,aAMzBb,EAAA,WAAmCxC,EAAmBjB,EAAcgB,GA4B1D,OA3BIC,EAAWsD,aAAWtD,EAAMK,MAC5BrC,OAAK6B,KAAOG,EAAYsD,YAAQhC,QAAC,SAAgBhC,GAEhD,MAAK+D,EAAU,SAAQE,QAAKjE,IAAM,IAO1BU,EAAWsD,YAAWtD,EAAWsD,WAAMhE,GAA/C,CAIH,IAAyB6D,EAAG,IAAcN,EAAA,EAAI9C,EACpCC,EAAWsD,WAAoBhE,IAC3BP,EAAKsE,EAAM/D,GAAK8D,KAC5B,MAEQvD,EAAwB7B,OAAA6E,EAAA,EAAA7E,EAAWe,EAAKsE,EAAM/D,GAAK8D,KAAO,MAE9DpF,OAAO2E,OAAsBQ,EAAYjD,aAGnDL,YAIRG,mDC/BAwC,EAAA,WAAmCxC,EAAmBjB,EAAcgB,GAChE,IAAmByD,EAAcxF,OAAAyF,EAAA,EAAAzF,CAAOgC,EAAOD,GACrCF,EAAwB7B,OAAA0F,EAAA,EAAA1F,CAAYe,GACrCkB,EAAcjC,OAAA0F,EAAA,EAAA1F,CAAYe,GAEhC,OAAmB0E,EAAA,EAAI1C,IAAYhC,IAChByE,IACQA,EAAQG,SAClC,GACoBH,GACxBxD,IAEkByD,EAAA,EAAI3B,IAAU/C,EAAAf,OAAe2E,UAAkBa,GAAUxD,GACnEH,OACM+D,WACV7E,KACa0E,EAAA,EAAI3B,KAAM7B,GAAO4D,OAAMhE,GAAKuD,KAAK,KAAarE,GAE3CyE,GACxBxD,4ECV6B8D,EAAG,SAAuBC,EAAkCC,GACrF,KAAmBD,EAAO7E,QAAG,CACzB,IAAOI,EAAuByE,EAAQE,SAAO,GACrCpE,EAAkBP,EAAW0E,EAAOH,QAASvE,IAAY0E,EACtDE,EAAOrE,EAAKuD,KAAK,KAAQ1D,QAAM,MAAM,IAE7C,IAAmByE,EAAA,EAAIpD,IAAUmD,GAI1B,MACV,GAEA,IAAUlE,EAAmCmE,EAAA,EAAI/F,IAAkB+F,EAAA,EAAI/F,IAAW8F,IAGpEF,EADJhE,EAAMK,KACYrC,OAAAoG,EAAA,EAAApG,CAAOgC,EAAKK,MACxC,GAEAR,EAGE,OAAWmE,EAAKZ,KAC1B,MAqC0BiB,EAAG,SAAiCC,GACvD,IAAmBH,EAAA,EAAIpD,IAASuD,EAAMhF,KAI/B,OACVgF,EAEA,IAAavF,EAA4BoF,EAAA,EAAI/F,IAASkG,EAAMhF,KAClDU,EAAqBmE,EAAA,EAAI/F,IAAYW,GAEzC,OAAOf,OAAO2E,UAAW3C,EACnCsE,IAQkBC,EAAG,SAAiBC,EAAoBZ,EAAkCU,GACxF,IACSzE,EAIH,OAFFA,EAzDoB,SAA6C2E,GAClE,OAAQA,GACGA,EAAM3E,KACC2E,EACjB3E,QAkDgC4E,CAAQD,GAGpBX,OAASS,EAAMhF,IAASgF,EAAIhF,IAAMF,MAAO,SAE3DpB,OAAc2E,UAAa2B,GAC1BhF,IA5CiB,SAAiBkF,EAAoBZ,EAAgCU,GAC7F,IAASrE,EAAcjC,OAAAoG,EAAA,EAAApG,CAAa4F,GACpBG,EAAWO,EAAIhF,IAAMF,MAAM,KAGxC,OAAOoF,GAAexG,OAAAoG,EAAA,EAAApG,CAAOwG,EAAKlF,OAASW,EACZ6D,EAAaC,EAAQS,EAAIlF,IAAMF,MACjE,MAE8B0E,EAAaC,GAC/C9D,IAkCgCyE,CAAOF,EAAYZ,EAAWU,GAG9DzE,UAEqB8E,EAAG,SAA2BC,EAA2BC,EAAwBP,GAC9FM,EAAsBf,OAAegB,GAAOlF,OAAC,SAAkB4B,GACzD,OAAIA,EAAIjC,MAAagF,EAC/BhF,MAAUJ,SACEoF,EAAuBD,EAAWC,GAC5BM,EAAKE,KACvBR,SAmIA,SAAAS,EAAoBhF,EAAoB6D,EAAkBY,EAAsCQ,GAIzF,eAhBA9H,KAAiB+H,qBAcXD,EAAYA,IAAU,MAEvBjF,EAAS0C,SAAeyC,EAAA,EAAaF,GACzC,MAASjF,EACbQ,OAEA,IAAW4E,EAAsBnH,OAAAoG,EAAA,EAAApG,CAAW4F,GAAO,GAAKR,KAAM,KAE3D,GAAmBe,EAAA,EAAIpD,IAAUoE,GAAjC,CAOH,IAAeC,EAAqBjB,EAAA,EAAI/F,IAAkB+F,EAAA,EAAI/F,IAAW+G,IAC5DC,EAAKnF,MACLmF,EAAK/E,KAAY+E,EAAKnF,IACtBmF,EAAInF,SAAad,SACViG,EACpBnF,KACI/C,KAAkB+H,kBA1IN,SAAiBT,EAAoBZ,EAAqCoB,EAAyCI,GACvI,IAAOC,EAAoBL,EAAQzB,QAAK,KACtBqB,KAAgCC,KACzCS,GAAY,SAAW,SAG7B,GAAUN,EAAYO,YAAK,OAASF,EAI7B,SAIP,GAAIA,EAAK,EAOF,OANGL,EAAMQ,MAAIH,EAAK,GAAIhG,IAAC,SAA0BoG,GACnD,IAAYnB,EAAeC,EAAOC,EAAYZ,EAAI6B,EAAY7E,cAAaC,QAAMvB,IAAoBmG,GAAmBA,GAE1Gb,EAAKE,KAAqBT,EAC5CC,MAGJM,EA+BG,GA5BMI,EAAMQ,MAAE,EAAMH,GAAQ/D,QAAC,SAA0BmE,GACtD,IAAYnB,EAAeC,EAAOC,EAAYZ,EAAI6B,EAAY7E,cAAaC,QAAMvB,IAAoBmG,GAAmBA,GAE1Gb,EAAKE,KAAqBT,EAC5CC,MAESU,EAAMQ,MAAIH,EAAK,GAAQ/D,QAAC,SAA0BmE,GACvD,IAAYnB,EAAeC,EAAOC,EAAYZ,EAAI6B,EAAY7E,cAAaC,QAAMvB,IAAoBmG,GAAmBA,GAE3GZ,EAAKC,KAAqBT,EAC3CC,MAGac,EAAKzE,OAAU2E,EAAG,IAAaF,EAAY9B,YAC9CtF,OAAK6B,KAAUuF,EAAY9B,YAAQhC,QAAC,SAAemE,GACrD,IAAYnB,EAAeC,EAAOC,EAAYZ,GAAOtE,IAAoBmG,IAQ1Dd,EAAeC,EAAeC,EACjDP,KAISc,EAAKzE,OAAU2E,EAAG,IAAaF,EAAOlC,MAAE,CACjD,IAAYoB,EAAAC,EAAsBC,EAAYZ,GACvCtE,IAAatB,OAAAoG,EAAA,EAAApG,CAAUoH,EAAWxB,YAAO,IAAKR,KAClD,OAUYuB,EAAeC,EAAeC,EAQjDP,GAGG,GAAMgB,EAAQ/B,QAAU6B,EAAgBzE,MAAK,EAAE,CAC9C,IAAY+E,EAAAnB,EAAsBC,EAAYZ,GACvCtE,IAAatB,OAAAoG,EAAA,EAAApG,CAAUoH,EAAWxB,YAAM,IAAQ,GAAKR,KACzD,OASYuB,EAAeC,EAAeC,EACjDa,GAEM,OAAed,EAAOf,OAChCgB,GA6CgDc,CAAOnB,EAAYZ,EAAWoB,EAC1EI,uECxQuBQ,GACnBjF,KAAS,QACRuC,OACID,QACGtC,KATM,SAUDkF,gBACZ,IACOlF,KAAU,SACNmF,UAAS,OACPxC,YACHhE,KAAQqB,KAfL,6ECIf,IAAQoF,EAAK","file":"index.prd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SFC\"] = factory();\n\telse\n\t\troot[\"SFC\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2ea4696a063973b00b34","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { schemaTypeFactory } from \"../factory\";\n\n// 去掉末尾的#正则\nconst regexp = /#$/g;\n\n/**\n* 解析path成成数据的路径\n* 最终schema需要与uiSchema做合并，uiSchema中的key配置的是数组 [\"appType', '-','type']，所以需要做一下转换\n* 1. 去掉properties，items关键字转换成【 - 】\n* 2. 第一个字符去掉末尾的【 # 】\n* @example design#/properties/appType => [\"appType']\n* @example design#/properties/appType/type => [\"appType','type']\n* @example design#/properties/appType/items/properties/type => [\"appType', '-','type']\n* @param schemaKey schema的path\n* @param keepFirst 是否需要保留第一个\n*/\nexport const getDataKeys = (schemaKey: string, keepFirst = false): string[] => {\n    let keys = schemaKey.split(\"/\").map((key: string, index: number) => {\n        // 第一个替换末尾的#\n        if (index === 0 && regexp.test(key)) {\n            // 这里是regexp的陷阱,需要修改lastIndex = 0\n            // 对于同一个正则表达式对象regex，不能重复调用：第一次返回true，第二次就返回false，很显然这种效果不是我们想要的。\n            // 这是因为RegExp.test()方法，第一次从位置0开始查找，可以匹配；第二次的查找位置就不是0了，说以就不能匹配了。\n            regexp.lastIndex = 0;\n            return keepFirst ? key.replace(regexp, \"\") : null;\n        }\n\n        // 去掉properties\n        if (key === \"properties\") {\n            return null;\n        }\n\n        // 转换items成-\n        if (key === \"items\") {\n            return \"-\";\n        }\n\n        return key;\n    });\n\n    // 提取其中不为空的项\n    return keys.filter((key: string | null) => {\n        return key !== null;\n    }) as string[];\n};\n\n/**\n* 从schemaPath中获取$id\n* @param schemaKey 当前schema的path\n*/\nexport const getSchemaId = (schemaKey: string): string => {\n    const keys = schemaKey.split(\"/\");\n\n    if (!keys.length) {\n        if (!__PROD__) {\n            throw new Error(`${schemaKey} not a valid schemaPath.`);\n        }\n        return \"\";\n    }\n\n    return keys[0].replace(regexp, \"\");\n};\n\n\n/**\n * 解析schema中的字段，缓存到【schemaFieldFactory】中\n * 1. 验证schema的合法性\n * 2. 提取成map\n */\nexport default class ResolveLib {\n    public mergeSchema: JSONSchema6 = {};\n\n    constructor(private ajv: Ajv, schema: JSONSchema6, readonly $id = \"\") {\n        // 验证schema的完整性\n        if (!$id) {\n            this.initSchema(ajv, schema);\n        }\n        // 生成map\n        this.compileSchema(schema, $id || schema.$ref || \"\");\n    }\n\n    /**\n     * 初始化schema\n     * 1. 判断$id，如果不存在，报错\n     * 2. 验证schema的结构是否正确，不正确报错\n     * 3. 若果ajv中不存在schema，则添加进ajv\n     * @param ajv     ajv的实例\n     * @param schema  schema\n     */\n    private initSchema(ajv: Ajv, schema: JSONSchema6): JSONSchema6 {\n        let $id: string | undefined = schema.$id;\n        // 如果没有$id, 同时没有$ref的情况下直接报错\n        if (!$id && !schema.$ref) {\n            if (!__PROD__) {\n                throw new Error(`id is required.`);\n            }\n            return schema;\n        }\n\n        // 验证schema的正确性\n        if (!ajv.validateSchema(schema)) {\n            throw ajv.errors;\n        }\n\n        // 把schema加入到ajv\n        if ($id && !ajv.getSchema($id)) {\n            ajv.addSchema(schema);\n        }\n\n        return schema;\n    }\n\n    /**\n     * 遍历schema，生成map\n     * 1. 如果schema.type不是string，报错\n     * 2. 调用【schemaTypeFactory\n     * @param schema  schema\n     */\n    private compileSchema(schema: JSONSchema6, $id: string): void {\n        schema = schemaTypeFactory.get(\"undefined\")(schema, $id || (schema.$id + \"#\"), this.ajv);\n\n        this.mergeSchema = schema;\n\n        // 如果不存在type，则直接返回\n        if (!schema.type || schema.$ref) {\n            return;\n        }\n\n        // 这里只解析type为字符串的结构，不支持数组类型的type\n        if (schema.type.constructor !== String) {\n            if (!__PROD__) {\n                throw new Error(`schema type[${schema.type}] can only be string.`);\n            }\n            return;\n        }\n\n        let type: string = schema.type.toString();\n\n        // 这里调用相对应的type的方法，来解析schema\n        if (schemaTypeFactory.has(type)) {\n            this.mergeSchema = schemaTypeFactory.get(type)(schema, $id || (schema.$id + \"#\"), this.ajv);\n        }\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/resolve.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { BaseFactory } from \"./libs/factory\";\nimport { FxJsonSchema } from \"./models/jsonschema\";\n\nexport let schemaFieldFactory = new BaseFactory<FxJsonSchema>();\nexport let schemaKeyWordFactory = new BaseFactory<(schema: JSONSchema6, ajv: Ajv) => JSONSchema6>();\nexport let schemaTypeFactory = new BaseFactory<(schema: JSONSchema6, $id: string, ajv: Ajv) => JSONSchema6>();\nexport let schemaKeysFactory = new BaseFactory<string>();\n\n/**\n * 遍历所有的keyword，解析schema\n * @param schema schema\n * @param ajv    ajv的实例\n */\nexport let convertKeys = (schema: JSONSchema6, ajv: Ajv): JSONSchema6 => {\n    schemaKeyWordFactory.forEach((key: string, val: (schema: JSONSchema6, ajv: Ajv) => JSONSchema6) => {\n        schema = val(schema, ajv);\n    });\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/factory.ts","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/helpers/classCallCheck.js\n// module id = 2\n// module chunks = 0","/**\n * 实例的工厂类\n */\nexport class BaseFactory<T> {\n    protected i: { [id: string]: T; } = {};\n    private pi: { [id: string]: boolean; } = {};\n\n    /**\n     * 添加一个实例\n     * @param name     {string}    实例的名称\n     * @param engine   {IEngine}   实例\n     * @param override {boolean}   是否覆盖\n     * @return         {void}\n     */\n    public add(name: string, intance: T, override = false): boolean | void {\n        if (this.pi.hasOwnProperty(name)) {\n            return;\n        }\n\n        if (!override && this.has(name)) {\n            return;\n        }\n        this.i[name] = intance;\n\n        return true;\n    }\n\n    public has(name: string): boolean {\n        return this.i.hasOwnProperty(name);\n    }\n\n    /**\n     * 获取一个实例\n     * @param name    {String}  实例标志\n     */\n    public get(name: string): T {\n        if (this.has(name)) {\n            return this.i[name];\n        }\n        if (!__PROD__) {\n            throw new Error(`name=[${name}]not exist`);\n        }\n\n        return null as any;\n    }\n\n    /**\n     * 锁定实例\n     * @param name 实例名称\n     */\n    public lock(name: string): void {\n        if (this.has(name)) {\n            this.pi[name] = true;\n        }\n    }\n    /**\n     * 解锁实例\n     * @param name 实例名称\n     */\n    public unLock(name: string): void {\n        if (this.has(name)) {\n            delete this.pi[name];\n        }\n    }\n\n    /**\n     * 遍历所有的元素\n     * @param func 遍历方法\n     */\n    public forEach(func: (key: string, val: T) => any): void {\n        if (!func) {\n            return;\n        }\n\n        for (const key in this.i) {\n            if (this.i.hasOwnProperty(key)) {\n                const element = this.i[key];\n\n                if (func(key, element) === false) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * 清空当前的hash\n     */\n    public clear() {\n        this.i = {};\n        this.pi = {};\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/factory.ts","import { ref, oneof, anyof } from \"./keys/index\";\nimport { array, none, object } from \"./types/index\";\nimport { BaseFactory } from \"./libs/factory\";\nimport { schemaFieldFactory, schemaKeyWordFactory, schemaTypeFactory, schemaKeysFactory } from \"./factory\";\nimport { FxJsonSchema } from \"./models/jsonschema\";\nimport { UiSchema } from \"./models/uischema\";\nexport { default as ResolveLib, getSchemaId, getDataKeys } from \"./libs/resolve\";\nexport { default as MergeLib } from \"./libs/merge\";\n\nschemaKeyWordFactory.add(\"ref\", ref);\nschemaKeyWordFactory.add(\"oneof\", oneof);\nschemaKeyWordFactory.add(\"anyof\", anyof);\n\n\nschemaTypeFactory.add(\"array\", array);\nschemaTypeFactory.add(\"string\", none);\nschemaTypeFactory.add(\"undefined\", none);\nschemaTypeFactory.add(\"number\", none);\nschemaTypeFactory.add(\"null\", none);\nschemaTypeFactory.add(\"any\", none);\nschemaTypeFactory.add(\"integer\", none);\nschemaTypeFactory.add(\"boolean\", none);\nschemaTypeFactory.add(\"object\", object);\n\nexport {\n    FxJsonSchema,\n    UiSchema,\n    BaseFactory,\n    schemaKeysFactory,\n    schemaFieldFactory,\n    schemaKeyWordFactory,\n    schemaTypeFactory\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import { Ajv, ValidateFunction } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib, getDataKeys } from \"../libs/resolve\";\n\n/**\n * 解析schema中的关键字 ref\n * 如果有$ref关键字，则从ajv中获取$ref的schema\n * 如果ajv中发现了schema，则添加$ref和refKeys，返回schema\n */\nexport default (schema: JSONSchema6, ajv: Ajv) => {\n    if (schema && schema.$ref) {\n        let validate: ValidateFunction = ajv.getSchema(schema.$ref);\n\n        if (validate && validate.schema) {\n            let schemaAjv = Object.assign({}, validate.schema) as JSONSchema6;\n\n            schemaAjv.$ref = schema.$ref;\n            delete schemaAjv.$id;\n\n            Object.assign(schemaAjv, {\n                refKeys: getDataKeys(schema.$ref)\n            });\n\n            return schemaAjv;\n        } else {\n            if (!__PROD__) {\n                throw new Error(\"${schema.$ref} not exist.\");\n            }\n        }\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/keys/ref.ts","\nimport { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib } from \"../libs/resolve\";\nimport MergeLib from \"../libs/merge\";\n\n/**\n * 解析schema中的关键字 oneOf\n * 如果发现有oneOf关键字，遍历替换成schema\n */\nexport default (schema: JSONSchema6, ajv: Ajv): JSONSchema6 => {\n\n    if (!schema) {\n        return schema;\n    }\n\n    let oneOf = schema.oneOf;\n\n    if (oneOf && oneOf.constructor === Array) {\n        schema.oneOf = oneOf.map((schemaOfOne: JSONSchema6) => {\n            let { mergeSchema } = new ResolveLib(ajv, schemaOfOne);\n\n            // if (mergeSchema.$id) {\n            //     mergeSchema.$ref = mergeSchema.$id;\n            //     delete mergeSchema.$id;\n            // }\n\n            return mergeSchema;\n        });\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/keys/oneof.ts","\nimport { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib } from \"../libs/resolve\";\nimport MergeLib from \"../libs/merge\";\n\n/**\n * 解析schema中的关键字 oneOf\n * 如果发现有oneOf关键字，遍历替换成schema\n */\nexport default (schema: JSONSchema6, ajv: Ajv): JSONSchema6 => {\n\n    if (!schema) {\n        return schema;\n    }\n\n    let anyOf = schema.anyOf;\n\n    if (anyOf && anyOf.constructor === Array) {\n        schema.anyOf = anyOf.map((schemaOfOne: JSONSchema6) => {\n            let { mergeSchema } = new ResolveLib(ajv, schemaOfOne);\n\n            // if (mergeSchema.$id) {\n            //     mergeSchema.$ref = mergeSchema.$id;\n            //     delete mergeSchema.$id;\n            // }\n\n            return mergeSchema;\n        });\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/keys/anyof.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib, getDataKeys } from \"../libs/resolve\";\n\nconst items = \"items\";\n\n/**\n * 解析schema中的type=array的结构\n * 如果存在items,则继续解析schema.item\n */\nexport default (schema: JSONSchema6, schemaKey: string, ajv: Ajv) => {\n    if (schema.items) {\n        let propertySchemaResolve = new ResolveLib(ajv,\n            schema.items as JSONSchema6,\n            [schemaKey, items].join(\"/\")\n        );\n\n        const keys: string[] = getDataKeys([schemaKey, items].join(\"/\"));\n\n        Object.assign(propertySchemaResolve.mergeSchema, {\n            keys\n        });\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/types/array.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib, getDataKeys } from \"../libs/resolve\";\n\nconst pro = \"properties\";\n\n/**\n * 解析schema中的type=object的结构\n * 如果存在schema.properties,则遍历properties，继续解析schema.properties[key]\n */\nexport default (schema: JSONSchema6, schemaKey: string, ajv: Ajv) => {\n    if (schema.properties && !schema.$ref) {\n        Object.keys(schema.properties).forEach((key: string) => {\n\n            if ([pro, \"items\"].indexOf(key) >= 0) {\n                if (!__PROD__) {\n                    throw new Error(`${key}can not be key words.`);\n                }\n                return;\n            }\n\n            if (!schema.properties || !schema.properties[key]) {\n                return;\n            }\n\n            let propertySchemaResolve = new ResolveLib(ajv,\n                schema.properties[key] as JSONSchema6,\n                [schemaKey, pro, key].join(\"/\")\n            );\n\n            const keys: string[] = getDataKeys([schemaKey, pro, key].join(\"/\"));\n\n            Object.assign(propertySchemaResolve.mergeSchema, {\n                keys\n            });\n        });\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/types/object.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { schemaFieldFactory, schemaKeysFactory, convertKeys } from \"../factory\";\nimport { default as ResolveLib, getDataKeys, getSchemaId } from \"../libs/resolve\";\n\n/**\n * 解析schema中的type!=array && type!=object的结构\n */\nexport default (schema: JSONSchema6, schemaKey: string, ajv: Ajv) => {\n    const currentSchema = convertKeys(schema, ajv);\n    const keys: string[] = getDataKeys(schemaKey);\n    const $id = getSchemaId(schemaKey);\n\n    if (schemaFieldFactory.has(schemaKey)) {\n        if (currentSchema) {\n            (currentSchema as any).resolve = true;\n        }\n        return currentSchema || schema;\n    }\n\n    schemaFieldFactory.add(schemaKey, Object.assign({}, currentSchema || schema, {\n        keys,\n        schemaPath: schemaKey\n    }));\n    schemaKeysFactory.add([$id].concat(keys).join(\"/\"), schemaKey);\n\n    return currentSchema || schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/types/none.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { uiSchemaSchema, UiSchema } from \"../models/uischema\";\nimport { schemaFieldFactory, schemaKeysFactory } from \"../factory\";\nimport { default as ResolveLib, getDataKeys, getSchemaId } from \"./resolve\";\nimport { FxJsonSchema } from \"../models/jsonschema\";\n\n/**\n* 根据给出的parentKeys和uiSchemaKeys来获取uiSchema的key\n* 1. 遍历uiSchemaKeys，分别于parentKeys做合并\n* 2. 合并后的keys去仓库里面找，如果为找到则报错\n* 3. 判断找到的schema中是否带有 $ref\n* 4. 如果有$ref，则更改parentKeys为$ref的路径\n* 5. 如果没有，则更改parentKeys为当前合并的keys\n* @param uiSchemaKeys 当前的keys\n* @param parentKeys   父亲的keys\n*/\nconst getUiSchemaKeyRecursion = (uiSchemaKeys: string[], parentKeys: string[]): string => {\n    while (uiSchemaKeys.length) {\n        let key: string = uiSchemaKeys.shift() || \"\";\n        let keys: string[] = key ? parentKeys.concat([key]) : parentKeys;\n        let keysStr = keys.join(\"/\").replace(/\\/$/, \"\");\n\n        if (!schemaKeysFactory.has(keysStr)) {\n            if (!__PROD__) {\n                throw new Error(`${keys.join(\"/\")} did not found.`);\n            }\n            return \"\";\n        }\n\n        let schema: FxJsonSchema = schemaFieldFactory.get(schemaKeysFactory.get(keysStr));\n\n        if (schema.$ref) {\n            parentKeys = getDataKeys(schema.$ref, true);\n        } else {\n            parentKeys = keys;\n        }\n    }\n\n    return parentKeys.join(\"/\");\n};\n/**\n  * 获取父亲的keys\n  */\nconst getParentSchemaKeys = (parent: UiSchema): Array<string | number> => {\n    if (parent) {\n        if (parent.keys) {\n            return parent.keys;\n        }\n    }\n\n    return [];\n};\n\n/**\n * 获取当前uiSchema的key\n * 如果没有父亲节点\n * 默认返回父亲的key+当前uiSchema的key\n * @param uiSchema uiSchma\n */\nconst getCurrentSchemaKey = (parent: UiSchema, schemaPath: string, uiSchema: UiSchema): string => {\n    const $id = getSchemaId(schemaPath);\n    let uiSchemaKeys = uiSchema.key.split(\"/\");\n\n    // 如果父亲节点的shcemaId不是传入的schemaId，则不适用父亲的key做计算\n    if (parent && getSchemaId(parent.key) === $id) {\n        return getUiSchemaKeyRecursion(uiSchemaKeys, parent.key.split(\"/\"));\n    }\n\n    return getUiSchemaKeyRecursion(uiSchemaKeys, [$id]);\n};\n\n/**\n * 如果在【schemaKeysFactory】中没有发现uiSchema.key,则报错\n * 从【schemaKeysFactory】获取对应的schema，与uiSchema合并之后返回\n * @param uiSchema uiSchema\n */\nconst mergeUiSchemaToArray = (uiSchema: UiSchema): UiSchema => {\n    if (!schemaKeysFactory.has(uiSchema.key)) {\n        if (!__PROD__) {\n            throw new Error(`${uiSchema.key} did not found. do you forget to resolve schema first.`);\n        }\n        return uiSchema;\n    }\n\n    let schemaKey: string = schemaKeysFactory.get(uiSchema.key);\n    let schema = schemaFieldFactory.get(schemaKey);\n\n    return Object.assign({}, schema, uiSchema);\n};\n\n/**\n * 初始化uiSchema\n * 如果是字符串；用$id合并之后，获取schema\n * 如果是【UiSchema】；合并key之后，获取schema\n * @param uiSchema uiSchema\n */\nconst initUiSchema = (parent: UiSchema, schemaPath: string, uiSchema: UiSchema): UiSchema => {\n    let parentKeys = getParentSchemaKeys(parent),\n        keys;\n\n    keys = parentKeys.concat(uiSchema.key ? uiSchema.key.split(\"/\") : []);\n\n    return Object.assign({}, uiSchema, {\n        key: getCurrentSchemaKey(parent, schemaPath, uiSchema),\n        keys\n    });\n};\n\nconst pushMergeResult = (uiSchemasFirst: UiSchema[], uiSchemasLast: UiSchema[], uiSchema: UiSchema) => {\n    if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n        return val.key === uiSchema.key;\n    }).length) {\n        uiSchema = mergeUiSchemaToArray(uiSchema);\n        uiSchemasFirst.push(uiSchema);\n    }\n};\n\n/**\n * 合并uiSchema\n * 1. 先判断uiSchema中是否存在*\n * 2. 如果没有*号，则遍历uiSchema，合并数据\n * 3. 如果存在*号；先合并*之前和*之后的uiSchema\n * 4. 遍历当前的schema：\n *    如果是object，则遍历properties，然后合并数据\n *    如果是array，则直接返回items，然后合并数据\n * @param parent\n * @param schemaPath\n * @param uiSchemas\n * @param curSchema\n */\nconst initMergeSchema = (parent: UiSchema, schemaPath: string, uiSchemas: Array<UiSchema | string>, curSchema: FxJsonSchema): UiSchema[] => {\n    let idx: number = uiSchemas.indexOf(\"*\"),\n        uiSchemasFirst: UiSchema[] = [], uiSchemasLast: UiSchema[] = [],\n        types = [\"object\", \"array\"];\n\n    // 如果存在多个*，则报错\n    if (uiSchemas.lastIndexOf(\"*\") !== idx) {\n        if (!__PROD__) {\n            throw new Error(\"uiSchema can only has one *.\");\n        }\n        return [];\n    }\n\n    // 不存在*号的情况\n    if (idx < 0) {\n        uiSchemas.slice(idx + 1).map((us: string | UiSchema) => {\n            let uiSchema = initUiSchema(parent, schemaPath, us.constructor === String ? { key: us } as UiSchema : (us as UiSchema));\n\n            uiSchemasFirst.push(mergeUiSchemaToArray(uiSchema));\n        });\n\n        return uiSchemasFirst;\n    }\n\n    // 处理*之前的数据\n    uiSchemas.slice(0, idx).forEach((us: string | UiSchema) => {\n        let uiSchema = initUiSchema(parent, schemaPath, us.constructor === String ? { key: us } as UiSchema : (us as UiSchema));\n\n        uiSchemasFirst.push(mergeUiSchemaToArray(uiSchema));\n    });\n    // 处理*之后的数据\n    uiSchemas.slice(idx + 1).forEach((us: string | UiSchema) => {\n        let uiSchema = initUiSchema(parent, schemaPath, us.constructor === String ? { key: us } as UiSchema : (us as UiSchema));\n\n        uiSchemasLast.push(mergeUiSchemaToArray(uiSchema));\n    });\n\n    // 如果是object类型，遍历properties属性，与之前的数据去重后添加到数组\n    if (curSchema.type === types[0] && curSchema.properties) {\n        Object.keys(curSchema.properties).forEach((us: string) => {\n            let uiSchema = initUiSchema(parent, schemaPath, { key: us } as UiSchema);\n\n            // if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n            //     return val.key === uiSchema.key;\n            // }).length) {\n            //     uiSchema = mergeUiSchemaToArray(uiSchema);\n            //     uiSchemasFirst.push(uiSchema);\n            // }\n            pushMergeResult(uiSchemasFirst, uiSchemasLast, uiSchema);\n        });\n    }\n\n    // 如果是数组，获取下一级的key，然后做对比处理\n    if (curSchema.type === types[1] && curSchema.items) {\n        let uiSchema = initUiSchema(parent, schemaPath, {\n            key: getDataKeys(curSchema.schemaPath || \"\").join(\"/\")\n        });\n        // let uiSchemaItems = this.initUiSchema(ResolveLib.getDataKeys(this.curSchema.schemaPath).concat([\"-\"]).join(\"/\"));\n\n        // if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n        //     return val.key === uiSchema.key;\n        // }).length) {\n        //     uiSchema = mergeUiSchemaToArray(uiSchema);\n        //     uiSchemasFirst.push(uiSchema);\n        // }\n\n        pushMergeResult(uiSchemasFirst, uiSchemasLast, uiSchema);\n\n        // if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n        //     return val.key === uiSchemaItems.key;\n        // }).length) {\n        //     uiSchemaItems = this.mergeUiSchemaToArray(uiSchemaItems);\n        //     uiSchemasFirst.push(uiSchemaItems);\n        // }\n    }\n\n    // 是普通对象\n    if (types.indexOf(curSchema.type as string) < 0) {\n        let uiSchema = initUiSchema(parent, schemaPath, {\n            key: getDataKeys(curSchema.schemaPath || \"\", false).join(\"/\")\n        });\n\n        // if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n        //     return val.key === uiSchema.key;\n        // }).length) {\n        //     uiSchema = mergeUiSchemaToArray(uiSchema);\n        //     uiSchemasFirst.push(uiSchema);\n        // }\n\n        pushMergeResult(uiSchemasFirst, uiSchemasLast, uiSchema);\n    }\n\n    return uiSchemasFirst.concat(uiSchemasLast);\n};\n\n/**\n * 用来转换uiSchema的类\n * 如果有$ref，则直接使用\n */\nexport default class MergeLib {\n    /**\n     * 合并过后的数据\n     */\n    public mergeUiSchemaList: UiSchema[] = [];\n\n    /**\n     * 构造函数\n     * 1. 验证uiSchema的正确性\n     * 2. 处理uiSchema中带*号的数据\n     * 3. 返回合并后的数据\n     * @param ajv         当前的ajv实例\n     * @param $id         schema的$id\n     * @param parent      父亲的schema\n     * @param uiSchemas   uiSchema\n     */\n    constructor(ajv: Ajv, schemaPath: string, parent: UiSchema, uiSchemas?: Array<UiSchema | string>) {\n\n        uiSchemas = uiSchemas || [\"*\"];\n\n        if (!ajv.validate(uiSchemaSchema, uiSchemas)) {\n            throw ajv.errors;\n        }\n\n        let keyPath: string = getDataKeys(schemaPath, true).join(\"/\");\n\n        if (!schemaKeysFactory.has(keyPath)) {\n            if (!__PROD__) {\n                throw new Error(`${keyPath} not exist or ${keyPath} did not resolve yet.`);\n            }\n            return;\n        }\n\n        const curSchema = schemaFieldFactory.get(schemaKeysFactory.get(keyPath));\n        if (curSchema.$id) {\n            curSchema.$ref = curSchema.$id;\n            curSchema.$id = undefined;\n            delete curSchema.$id;\n        }\n        this.mergeUiSchemaList = initMergeSchema(parent, schemaPath, uiSchemas, curSchema);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/merge.ts","import { FxJsonSchema , a } from \"./jsonschema\";\n\nlet string = \"string\";\n\n/**\n * uiSchema的模型schema\n */\nexport const uiSchemaSchema = {\n    type: \"array\",\n    items: {\n        anyOf: [{\n            type: string,\n            minLength: a\n        }, {\n            type: \"object\",\n            required: [\"key\"],\n            properties: {\n                key: { type: string }\n            }\n        }]\n    }\n};\n\nexport interface UiSchema extends FxJsonSchema {\n    key: string;\n    keys?: Array<string | number>;\n    children?: Array<UiSchema | string>;\n    refKeys?: string[];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/uischema.ts","import { JSONSchema6 } from \"json-schema\";\n\nexport interface FxJsonSchema extends JSONSchema6 {\n    schemaPath?: string;\n}\n\nexport const  a = 1;\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/jsonschema.ts"],"sourceRoot":""}