{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap a7d1dc9d3990d0f29753","webpack:///./src/libs/resolve.ts","webpack:///./src/factory.ts","webpack:///./src/libs/factory.ts","webpack:///./src/index.ts","webpack:///./src/keys/index.ts","webpack:///./src/keys/ref.ts","webpack:///./src/keys/oneof.ts","webpack:///./src/keys/anyof.ts","webpack:///./src/types/index.ts","webpack:///./src/types/array.ts","webpack:///./src/types/object.ts","webpack:///./src/types/none.ts","webpack:///./src/libs/merge.ts","webpack:///./src/models/uischema.ts","webpack:///./src/models/jsonschema.ts"],"names":[],"mappings":"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","file":"index.dev.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SFC\"] = factory();\n\telse\n\t\troot[\"SFC\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a7d1dc9d3990d0f29753","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { schemaTypeFactory } from \"../factory\";\n\n// 去掉末尾的#正则\nconst regexp = /#$/g;\n\n/**\n * 解析schema中的字段，缓存到【schemaFieldFactory】中\n * 1. 验证schema的合法性\n * 2. 提取成map\n */\nexport default class ResolveLib {\n    public mergeSchema: JSONSchema6 = {};\n\n    constructor(private ajv: Ajv, schema: JSONSchema6, readonly $id = \"\") {\n        // 验证schema的完整性\n        if (!$id) {\n            this.initSchema(ajv, schema);\n        }\n        // 生成map\n        this.compileSchema(schema, $id || schema.$ref || \"\");\n    }\n\n    /**\n     * 初始化schema\n     * 1. 判断$id，如果不存在，报错\n     * 2. 验证schema的结构是否正确，不正确报错\n     * 3. 若果ajv中不存在schema，则添加进ajv\n     * @param ajv     ajv的实例\n     * @param schema  schema\n     */\n    private initSchema(ajv: Ajv, schema: JSONSchema6): JSONSchema6 {\n        let $id: string | undefined = schema.$id;\n        // 如果没有$id, 同时没有$ref的情况下直接报错\n        if (!$id && !schema.$ref) {\n            if (!__PROD__) {\n                throw new Error(`id is required.`);\n            }\n            return;\n        }\n\n        // 验证schema的正确性\n        if (!ajv.validateSchema(schema)) {\n            throw ajv.errors;\n        }\n\n        // 把schema加入到ajv\n        if ($id && !ajv.getSchema($id)) {\n            ajv.addSchema(schema);\n        }\n\n        return schema;\n    }\n\n    /**\n     * 遍历schema，生成map\n     * 1. 如果schema.type不是string，报错\n     * 2. 调用【schemaTypeFactory\n     * @param schema  schema\n     */\n    private compileSchema(schema: JSONSchema6, $id: string): void {\n        schema = schemaTypeFactory.get(\"undefined\")(schema, $id || (schema.$id + \"#\"), this.ajv);\n\n        this.mergeSchema = schema;\n\n        // 如果不存在type，则直接返回\n        if (!schema.type || schema.$ref) {\n            return;\n        }\n\n        // 这里只解析type为字符串的结构，不支持数组类型的type\n        if (schema.type.constructor !== String) {\n            if (!__PROD__) {\n                throw new Error(`schema type[${schema.type}] can only be string.`);\n            }\n            return;\n        }\n\n        let type: string = schema.type.toString();\n\n        // 这里调用相对应的type的方法，来解析schema\n        if (schemaTypeFactory.has(type)) {\n            this.mergeSchema = schemaTypeFactory.get(type)(schema, $id || (schema.$id + \"#\"), this.ajv);\n        }\n    }\n\n    /**\n     * 解析path成成数据的路径\n     * 最终schema需要与uiSchema做合并，uiSchema中的key配置的是数组 [\"appType', '-','type']，所以需要做一下转换\n     * 1. 去掉properties，items关键字转换成【 - 】\n     * 2. 第一个字符去掉末尾的【 # 】\n     * @example design#/properties/appType => [\"appType']\n     * @example design#/properties/appType/type => [\"appType','type']\n     * @example design#/properties/appType/items/properties/type => [\"appType', '-','type']\n     * @param schemaKey schema的path\n     * @param keepFirst 是否需要保留第一个\n     */\n    public static getDataKeys(schemaKey: string, keepFirst = false): string[] {\n        let keys = schemaKey.split(\"/\").map((key: string, index: number) => {\n            // 第一个替换末尾的#\n            if (index === 0 && regexp.test(key)) {\n                // 这里是regexp的陷阱,需要修改lastIndex = 0\n                // 对于同一个正则表达式对象regex，不能重复调用：第一次返回true，第二次就返回false，很显然这种效果不是我们想要的。\n                // 这是因为RegExp.test()方法，第一次从位置0开始查找，可以匹配；第二次的查找位置就不是0了，说以就不能匹配了。\n                regexp.lastIndex = 0;\n                return keepFirst ? key.replace(regexp, \"\") : null;\n            }\n\n            // 去掉properties\n            if (key === \"properties\") {\n                return null;\n            }\n\n            // 转换items成-\n            if (key === \"items\") {\n                return \"-\";\n            }\n\n            return key;\n        });\n\n        // 提取其中不为空的项\n        return keys.filter((key: string | null) => {\n            return key !== null;\n        }) as string[];\n    }\n\n    /**\n     * 从schemaPath中获取$id\n     * @param schemaKey 当前schema的path\n     */\n    public static getSchemaId(schemaKey: string): string {\n        const keys = schemaKey.split(\"/\");\n\n        if (!keys.length) {\n            if (!__PROD__) {\n                throw new Error(`${schemaKey} not a valid schemaPath.`);\n            }\n            return;\n        }\n\n        return keys[0].replace(regexp, \"\");\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/resolve.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { BaseFactory } from \"./libs/factory\";\nimport { FxJsonSchema } from \"./models/jsonschema\";\n\nexport let schemaFieldFactory = new BaseFactory<FxJsonSchema>();\nexport let schemaKeyWordFactory = new BaseFactory<(schema: JSONSchema6, ajv: Ajv) => JSONSchema6>();\nexport let schemaTypeFactory = new BaseFactory<(schema: JSONSchema6, $id: string, ajv: Ajv) => JSONSchema6>();\nexport let schemaKeysFactory = new BaseFactory<string>();\n\n/**\n * 遍历所有的keyword，解析schema\n * @param schema schema\n * @param ajv    ajv的实例\n */\nexport let convertKeys = (schema: JSONSchema6, ajv: Ajv): JSONSchema6 => {\n    schemaKeyWordFactory.forEach((key: string, val: (schema: JSONSchema6, ajv: Ajv) => JSONSchema6) => {\n        schema = val(schema, ajv);\n    });\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/factory.ts","/**\n * 实例的工厂类\n */\nexport class BaseFactory<T> {\n    protected i: { [id: string]: T; } = {};\n    private pi: { [id: string]: boolean; } = {};\n\n    /**\n     * 添加一个实例\n     * @param name     {string}    实例的名称\n     * @param engine   {IEngine}   实例\n     * @param override {boolean}   是否覆盖\n     * @return         {void}\n     */\n    public add(name: string, intance: T, override = false): boolean | void {\n        if (this.pi.hasOwnProperty(name)) {\n            return;\n        }\n\n        if (!override && this.has(name)) {\n            return;\n        }\n        this.i[name] = intance;\n\n        return true;\n    }\n\n    public has(name: string): boolean {\n        return this.i.hasOwnProperty(name);\n    }\n\n    /**\n     * 获取一个实例\n     * @param name    {String}  实例标志\n     */\n    public get(name: string): T {\n        if (this.has(name)) {\n            return this.i[name];\n        }\n        if (__PROD__) {\n            throw new Error(`name=[${name}]not exist`);\n        }\n    }\n\n    /**\n     * 锁定实例\n     * @param name 实例名称\n     */\n    public lock(name: string): void {\n        if (this.has(name)) {\n            this.pi[name] = true;\n        }\n    }\n    /**\n     * 解锁实例\n     * @param name 实例名称\n     */\n    public unLock(name: string): void {\n        if (this.has(name)) {\n            delete this.pi[name];\n        }\n    }\n\n    /**\n     * 遍历所有的元素\n     * @param func 遍历方法\n     */\n    public forEach(func: (key: string, val: T) => any): void {\n        if (!func) {\n            return;\n        }\n\n        for (const key in this.i) {\n            if (this.i.hasOwnProperty(key)) {\n                const element = this.i[key];\n\n                if (func(key, element) === false) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * 清空当前的hash\n     */\n    public clear() {\n        this.i = {};\n        this.pi = {};\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/factory.ts","import { ref, oneof, anyof } from \"./keys/index\";\nimport { array, none, object } from \"./types/index\";\nimport { BaseFactory } from \"./libs/factory\";\nimport { schemaFieldFactory, schemaKeyWordFactory, schemaTypeFactory, schemaKeysFactory } from \"./factory\";\nimport { FxJsonSchema } from \"./models/jsonschema\";\nimport { UiSchema } from \"./models/uischema\";\nexport { default as ResolveLib } from \"./libs/resolve\";\nexport { default as MergeLib } from \"./libs/merge\";\n\nschemaKeyWordFactory.add(\"ref\", ref);\nschemaKeyWordFactory.add(\"oneof\", oneof);\nschemaKeyWordFactory.add(\"anyof\", anyof);\n\n\nschemaTypeFactory.add(\"array\", array);\nschemaTypeFactory.add(\"string\", none);\nschemaTypeFactory.add(\"undefined\", none);\nschemaTypeFactory.add(\"number\", none);\nschemaTypeFactory.add(\"null\", none);\nschemaTypeFactory.add(\"any\", none);\nschemaTypeFactory.add(\"integer\", none);\nschemaTypeFactory.add(\"boolean\", none);\nschemaTypeFactory.add(\"object\", object);\n\nexport {\n    FxJsonSchema,\n    UiSchema,\n    BaseFactory,\n    schemaKeysFactory,\n    schemaFieldFactory,\n    schemaKeyWordFactory,\n    schemaTypeFactory\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","export { default as ref } from \"./ref\";\nexport { default as oneof } from \"./oneof\";\nexport { default as anyof } from \"./anyof\";\n\n\n\n// WEBPACK FOOTER //\n// ./src/keys/index.ts","import { Ajv, ValidateFunction } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib } from \"../libs/resolve\";\n\n/**\n * 解析schema中的关键字 ref\n * 如果有$ref关键字，则从ajv中获取$ref的schema\n * 如果ajv中发现了schema，则添加$ref和refKeys，返回schema\n */\nexport default (schema: JSONSchema6, ajv: Ajv) => {\n    if (schema && schema.$ref) {\n        let validate: ValidateFunction = ajv.getSchema(schema.$ref);\n\n        if (validate && validate.schema) {\n            let schemaAjv = Object.assign({}, validate.schema) as JSONSchema6;\n\n            schemaAjv.$ref = schema.$ref;\n            delete schemaAjv.$id;\n\n            Object.assign(schemaAjv, {\n                refKeys: ResolveLib.getDataKeys(schema.$ref)\n            });\n\n            return schemaAjv;\n        } else {\n            if (!__PROD__) {\n                throw new Error(\"${schema.$ref} not exist.\");\n            }\n        }\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/keys/ref.ts","\nimport { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib } from \"../libs/resolve\";\nimport MergeLib from \"../libs/merge\";\n\n/**\n * 解析schema中的关键字 oneOf\n * 如果发现有oneOf关键字，遍历替换成schema\n */\nexport default (schema: JSONSchema6, ajv: Ajv): JSONSchema6 => {\n\n    if (!schema) {\n        return schema;\n    }\n\n    let oneOf = schema.oneOf;\n\n    if (oneOf && oneOf.constructor === Array) {\n        schema.oneOf = oneOf.map((schemaOfOne: JSONSchema6) => {\n            let { mergeSchema } = new ResolveLib(ajv, schemaOfOne);\n\n            // if (mergeSchema.$id) {\n            //     mergeSchema.$ref = mergeSchema.$id;\n            //     delete mergeSchema.$id;\n            // }\n\n            return mergeSchema;\n        });\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/keys/oneof.ts","\nimport { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib } from \"../libs/resolve\";\nimport MergeLib from \"../libs/merge\";\n\n/**\n * 解析schema中的关键字 oneOf\n * 如果发现有oneOf关键字，遍历替换成schema\n */\nexport default (schema: JSONSchema6, ajv: Ajv): JSONSchema6 => {\n\n    if (!schema) {\n        return schema;\n    }\n\n    let anyOf = schema.anyOf;\n\n    if (anyOf && anyOf.constructor === Array) {\n        schema.oneOf = anyOf.map((schemaOfOne: JSONSchema6) => {\n            let { mergeSchema } = new ResolveLib(ajv, schemaOfOne);\n\n            // if (mergeSchema.$id) {\n            //     mergeSchema.$ref = mergeSchema.$id;\n            //     delete mergeSchema.$id;\n            // }\n\n            return mergeSchema;\n        });\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/keys/anyof.ts","\nexport { default as array } from \"./array\";\nexport { default as object } from \"./object\";\nexport { default as none } from \"./none\";\n\n\n\n// WEBPACK FOOTER //\n// ./src/types/index.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib } from \"../libs/resolve\";\n\nconst items = \"items\";\n\n/**\n * 解析schema中的type=array的结构\n * 如果存在items,则继续解析schema.item\n */\nexport default (schema: JSONSchema6, schemaKey: string, ajv: Ajv) => {\n    if (schema.items) {\n        let propertySchemaResolve = new ResolveLib(ajv,\n            schema.items as JSONSchema6,\n            [schemaKey, items].join(\"/\")\n        );\n\n        const keys: string[] = ResolveLib.getDataKeys([schemaKey, items].join(\"/\"));\n\n        Object.assign(propertySchemaResolve.mergeSchema, {\n            keys\n        });\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/types/array.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib } from \"../libs/resolve\";\n\nconst pro = \"properties\";\n\n/**\n * 解析schema中的type=object的结构\n * 如果存在schema.properties,则遍历properties，继续解析schema.properties[key]\n */\nexport default (schema: JSONSchema6, schemaKey: string, ajv: Ajv) => {\n    if (schema.properties && !schema.$ref) {\n        Object.keys(schema.properties).forEach((key: string) => {\n\n            if ([pro, \"items\"].indexOf(key) >= 0) {\n                if (!__PROD__) {\n                    throw new Error(`${key}can not be key words.`);\n                }\n                return;\n            }\n\n            if (!schema.properties || !schema.properties[key]) {\n                return;\n            }\n\n            let propertySchemaResolve = new ResolveLib(ajv,\n                schema.properties[key] as JSONSchema6,\n                [schemaKey, pro, key].join(\"/\")\n            );\n\n            const keys: string[] = ResolveLib.getDataKeys([schemaKey, pro, key].join(\"/\"));\n\n            Object.assign(propertySchemaResolve.mergeSchema, {\n                keys\n            });\n        });\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/types/object.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { schemaFieldFactory, schemaKeysFactory, convertKeys } from \"../factory\";\nimport { default as ResolveLib } from \"../libs/resolve\";\n\n/**\n * 解析schema中的type!=array && type!=object的结构\n */\nexport default (schema: JSONSchema6, schemaKey: string, ajv: Ajv) => {\n    const currentSchema = convertKeys(schema, ajv);\n    const keys: string[] = ResolveLib.getDataKeys(schemaKey);\n    const $id = ResolveLib.getSchemaId(schemaKey);\n\n    if (schemaFieldFactory.has(schemaKey)) {\n        if (currentSchema) {\n            (currentSchema as any).resolve = true;\n        }\n        return currentSchema || schema;\n    }\n\n    schemaFieldFactory.add(schemaKey, Object.assign({}, currentSchema || schema, {\n        keys,\n        schemaPath: schemaKey\n    }));\n    schemaKeysFactory.add([$id].concat(keys).join(\"/\"), schemaKey);\n\n    return currentSchema || schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/types/none.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { uiSchemaSchema, UiSchema } from \"../models/uischema\";\nimport { schemaFieldFactory, schemaKeysFactory } from \"../factory\";\nimport { default as ResolveLib } from \"./resolve\";\nimport { FxJsonSchema } from \"../models/jsonschema\";\n\n/**\n* 根据给出的parentKeys和uiSchemaKeys来获取uiSchema的key\n* 1. 遍历uiSchemaKeys，分别于parentKeys做合并\n* 2. 合并后的keys去仓库里面找，如果为找到则报错\n* 3. 判断找到的schema中是否带有 $ref\n* 4. 如果有$ref，则更改parentKeys为$ref的路径\n* 5. 如果没有，则更改parentKeys为当前合并的keys\n* @param uiSchemaKeys 当前的keys\n* @param parentKeys   父亲的keys\n*/\nconst getUiSchemaKeyRecursion = (uiSchemaKeys: string[], parentKeys: string[]): string => {\n    while (uiSchemaKeys.length) {\n        let key: string = uiSchemaKeys.shift() || \"\";\n        let keys: string[] = key ? parentKeys.concat([key]) : parentKeys;\n        let keysStr = keys.join(\"/\").replace(/\\/$/, \"\");\n\n        if (!schemaKeysFactory.has(keysStr)) {\n            if (!__PROD__) {\n                throw new Error(`${keys.join(\"/\")} did not found.`);\n            }\n            return;\n        }\n\n        let schema: FxJsonSchema = schemaFieldFactory.get(schemaKeysFactory.get(keysStr));\n\n        if (schema.$ref) {\n            parentKeys = ResolveLib.getDataKeys(schema.$ref, true);\n        } else {\n            parentKeys = keys;\n        }\n    }\n\n    return parentKeys.join(\"/\");\n};\n/**\n  * 获取父亲的keys\n  */\nconst getParentSchemaKeys = (parent: UiSchema): Array<string | number> => {\n    if (parent) {\n        if (parent.keys) {\n            return parent.keys;\n        }\n    }\n\n    return [];\n};\n\n/**\n * 获取当前uiSchema的key\n * 如果没有父亲节点\n * 默认返回父亲的key+当前uiSchema的key\n * @param uiSchema uiSchma\n */\nconst getCurrentSchemaKey = (parent: UiSchema, schemaPath: string, uiSchema: UiSchema): string => {\n    const $id = ResolveLib.getSchemaId(schemaPath);\n    let uiSchemaKeys = uiSchema.key.split(\"/\");\n\n    // 如果父亲节点的shcemaId不是传入的schemaId，则不适用父亲的key做计算\n    if (parent && ResolveLib.getSchemaId(parent.key) === $id) {\n        return getUiSchemaKeyRecursion(uiSchemaKeys, parent.key.split(\"/\"));\n    }\n\n    return getUiSchemaKeyRecursion(uiSchemaKeys, [$id]);\n};\n\n/**\n * 如果在【schemaKeysFactory】中没有发现uiSchema.key,则报错\n * 从【schemaKeysFactory】获取对应的schema，与uiSchema合并之后返回\n * @param uiSchema uiSchema\n */\nconst mergeUiSchemaToArray = (uiSchema: UiSchema): UiSchema => {\n    if (!schemaKeysFactory.has(uiSchema.key)) {\n        if (!__PROD__) {\n            throw new Error(`${uiSchema.key} did not found. do you forget to resolve schema first.`);\n        }\n        return;\n    }\n\n    let schemaKey: string = schemaKeysFactory.get(uiSchema.key);\n    let schema = schemaFieldFactory.get(schemaKey);\n\n    return Object.assign({}, schema, uiSchema);\n};\n\n/**\n * 初始化uiSchema\n * 如果是字符串；用$id合并之后，获取schema\n * 如果是【UiSchema】；合并key之后，获取schema\n * @param uiSchema uiSchema\n */\nconst initUiSchema = (parent: UiSchema, schemaPath: string, uiSchema: UiSchema): UiSchema => {\n    let parentKeys = getParentSchemaKeys(parent),\n        keys;\n\n    keys = parentKeys.concat(uiSchema.key ? uiSchema.key.split(\"/\") : []);\n\n    return Object.assign({}, uiSchema, {\n        key: getCurrentSchemaKey(parent, schemaPath, uiSchema),\n        keys\n    });\n};\n\nconst pushMergeResult = (uiSchemasFirst: UiSchema[], uiSchemasLast: UiSchema[], uiSchema: UiSchema) => {\n    if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n        return val.key === uiSchema.key;\n    }).length) {\n        uiSchema = mergeUiSchemaToArray(uiSchema);\n        uiSchemasFirst.push(uiSchema);\n    }\n};\n\n/**\n * 合并uiSchema\n * 1. 先判断uiSchema中是否存在*\n * 2. 如果没有*号，则遍历uiSchema，合并数据\n * 3. 如果存在*号；先合并*之前和*之后的uiSchema\n * 4. 遍历当前的schema：\n *    如果是object，则遍历properties，然后合并数据\n *    如果是array，则直接返回items，然后合并数据\n * @param parent\n * @param schemaPath\n * @param uiSchemas\n * @param curSchema\n */\nconst initMergeSchema = (parent: UiSchema | null, schemaPath: string, uiSchemas: Array<UiSchema | string>, curSchema: FxJsonSchema): UiSchema[] => {\n    let idx: number = uiSchemas.indexOf(\"*\"),\n        uiSchemasFirst: UiSchema[] = [], uiSchemasLast: UiSchema[] = [],\n        types = [\"object\", \"array\"];\n\n    // 如果存在多个*，则报错\n    if (uiSchemas.lastIndexOf(\"*\") !== idx) {\n        if (!__PROD__) {\n            throw new Error(\"uiSchema can only has one *.\");\n        }\n        return;\n    }\n\n    // 不存在*号的情况\n    if (idx < 0) {\n        uiSchemas.slice(idx + 1).map((us: string | UiSchema) => {\n            let uiSchema = initUiSchema(parent, schemaPath, us.constructor === String ? { key: us } as UiSchema : (us as UiSchema));\n\n            uiSchemasFirst.push(mergeUiSchemaToArray(uiSchema));\n        });\n\n        return uiSchemasFirst;\n    }\n\n    // 处理*之前的数据\n    uiSchemas.slice(0, idx).forEach((us: string | UiSchema) => {\n        let uiSchema = initUiSchema(parent, schemaPath, us.constructor === String ? { key: us } as UiSchema : (us as UiSchema));\n\n        uiSchemasFirst.push(mergeUiSchemaToArray(uiSchema));\n    });\n    // 处理*之后的数据\n    uiSchemas.slice(idx + 1).forEach((us: string | UiSchema) => {\n        let uiSchema = initUiSchema(parent, schemaPath, us.constructor === String ? { key: us } as UiSchema : (us as UiSchema));\n\n        uiSchemasLast.push(mergeUiSchemaToArray(uiSchema));\n    });\n\n    // 如果是object类型，遍历properties属性，与之前的数据去重后添加到数组\n    if (curSchema.type === types[0] && curSchema.properties) {\n        Object.keys(curSchema.properties).forEach((us: string) => {\n            let uiSchema = initUiSchema(parent, schemaPath, { key: us } as UiSchema);\n\n            // if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n            //     return val.key === uiSchema.key;\n            // }).length) {\n            //     uiSchema = mergeUiSchemaToArray(uiSchema);\n            //     uiSchemasFirst.push(uiSchema);\n            // }\n            pushMergeResult(uiSchemasFirst, uiSchemasLast, uiSchema);\n        });\n    }\n\n    // 如果是数组，获取下一级的key，然后做对比处理\n    if (curSchema.type === types[1] && curSchema.items) {\n        let uiSchema = initUiSchema(parent, schemaPath, {\n            key: ResolveLib.getDataKeys(curSchema.schemaPath || \"\").join(\"/\")\n        });\n        // let uiSchemaItems = this.initUiSchema(ResolveLib.getDataKeys(this.curSchema.schemaPath).concat([\"-\"]).join(\"/\"));\n\n        // if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n        //     return val.key === uiSchema.key;\n        // }).length) {\n        //     uiSchema = mergeUiSchemaToArray(uiSchema);\n        //     uiSchemasFirst.push(uiSchema);\n        // }\n\n        pushMergeResult(uiSchemasFirst, uiSchemasLast, uiSchema);\n\n        // if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n        //     return val.key === uiSchemaItems.key;\n        // }).length) {\n        //     uiSchemaItems = this.mergeUiSchemaToArray(uiSchemaItems);\n        //     uiSchemasFirst.push(uiSchemaItems);\n        // }\n    }\n\n    // 是普通对象\n    if (types.indexOf(curSchema.type as string) < 0) {\n        let uiSchema = initUiSchema(parent, schemaPath, {\n            key: ResolveLib.getDataKeys(curSchema.schemaPath || \"\", false).join(\"/\")\n        });\n\n        // if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n        //     return val.key === uiSchema.key;\n        // }).length) {\n        //     uiSchema = mergeUiSchemaToArray(uiSchema);\n        //     uiSchemasFirst.push(uiSchema);\n        // }\n\n        pushMergeResult(uiSchemasFirst, uiSchemasLast, uiSchema);\n    }\n\n    return uiSchemasFirst.concat(uiSchemasLast);\n};\n\n/**\n * 用来转换uiSchema的类\n * 如果有$ref，则直接使用\n */\nexport default class MergeLib {\n    /**\n     * 合并过后的数据\n     */\n    public mergeUiSchemaList: UiSchema[];\n\n    /**\n     * 构造函数\n     * 1. 验证uiSchema的正确性\n     * 2. 处理uiSchema中带*号的数据\n     * 3. 返回合并后的数据\n     * @param ajv         当前的ajv实例\n     * @param $id         schema的$id\n     * @param parent      父亲的schema\n     * @param uiSchemas   uiSchema\n     */\n    constructor(ajv: Ajv, schemaPath: string, parent: UiSchema | null, uiSchemas?: Array<UiSchema | string>) {\n\n        uiSchemas = uiSchemas || [\"*\"];\n\n        if (!ajv.validate(uiSchemaSchema, uiSchemas)) {\n            throw ajv.errors;\n        }\n\n        let keyPath: string = ResolveLib.getDataKeys(schemaPath, true).join(\"/\");\n\n        if (!schemaKeysFactory.has(keyPath)) {\n            if (!__PROD__) {\n                throw new Error(`${keyPath} not exist or ${keyPath} did not resolve yet.`);\n            }\n            return;\n        }\n\n        const curSchema = schemaFieldFactory.get(schemaKeysFactory.get(keyPath));\n        if (curSchema.$id) {\n            curSchema.$ref = curSchema.$id;\n            curSchema.$id = undefined;\n        }\n        this.mergeUiSchemaList = initMergeSchema(parent || null, schemaPath, uiSchemas, curSchema);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/merge.ts","import { FxJsonSchema , a } from \"./jsonschema\";\n\nlet string = \"string\";\n\n/**\n * uiSchema的模型schema\n */\nexport const uiSchemaSchema = {\n    type: \"array\",\n    items: {\n        anyOf: [{\n            type: string,\n            minLength: a\n        }, {\n            type: \"object\",\n            required: [\"key\"],\n            properties: {\n                key: { type: string }\n            }\n        }]\n    }\n};\n\nexport interface UiSchema extends FxJsonSchema {\n    key: string;\n    keys?: Array<string | number>;\n    children?: Array<UiSchema | string>;\n    refKeys?: string[];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/uischema.ts","import { JSONSchema6 } from \"json-schema\";\n\nexport interface FxJsonSchema extends JSONSchema6 {\n    schemaPath?: string;\n}\n\nexport const  a = 1;\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/jsonschema.ts"],"sourceRoot":""}